// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Automation.Tests.BDD.Features.StockOutboundORU
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class StockOutboundORU_MSH_Segment_TestsFeature : object, Xunit.IClassFixture<StockOutboundORU_MSH_Segment_TestsFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "StockOutboundORU_MSH_Segment_Tests.feature"
#line hidden
        
        public StockOutboundORU_MSH_Segment_TestsFeature(StockOutboundORU_MSH_Segment_TestsFeature.FixtureData fixtureData, Automation_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Tests/BDD/Features/Stock Outbound ORU", "StockOutboundORU_MSH_Segment_Tests", "\tTests to verify the MSH segment of the Stock Outbound ORU HL7 interface", ProgrammingLanguage.CSharp, featureTags);
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public void TestInitialize()
        {
        }
        
        public void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
 #line hidden
#line 8
 testRunner.Given("var %vendorId% as 334 type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="StockOutboundORU_SmokeTest_MSH_Segment_HH_With_vsb_vdefconfig4_value_OLD")]
        [Xunit.TraitAttribute("FeatureTitle", "StockOutboundORU_MSH_Segment_Tests")]
        [Xunit.TraitAttribute("Description", "StockOutboundORU_SmokeTest_MSH_Segment_HH_With_vsb_vdefconfig4_value_OLD")]
        [Xunit.TraitAttribute("Category", "StockOutboundORU")]
        [Xunit.TraitAttribute("Category", "ApplicationID_416")]
        [Xunit.TraitAttribute("Category", "VendorId_334")]
        public void StockOutboundORU_SmokeTest_MSH_Segment_HH_With_Vsb_Vdefconfig4_Value_OLD()
        {
            string[] tagsOfScenario = new string[] {
                    "StockOutboundORU",
                    "ApplicationID_416",
                    "VendorId_334"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("StockOutboundORU_SmokeTest_MSH_Segment_HH_With_vsb_vdefconfig4_value_OLD", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 11
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
#line 16
 testRunner.Given("var %serviceLineId% as 1 type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 20
 testRunner.Given("sql query select top 1 vsb_id, vsb_branchcode from VENDORS_SERVICELINES_BRANCHES " +
                        "where vsb_vid = %vendorId% and vsb_slid = %serviceLineId% and vsb_active = \'Y\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 21
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 23
 testRunner.Given("var %vsb_id% is equal to response.sqlresult.[0].vsb_id type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 24
 testRunner.And("var %branchName% is equal to response.sqlresult.[0].vsb_branchcode type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 25
 testRunner.And("var %vsb_vdefconfig4% = %branchName% + 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 29
 testRunner.Given("sql query UPDATE dbo.VENDORS_SERVICELINES_BRANCHES SET vsb_vdefconfig4=\'%vsb_vdef" +
                        "config4%\' WHERE vsb_id=%vsb_id%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 30
 testRunner.When("method SQLServer-UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 34
 testRunner.Given("request read sql file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\GetClientInformation_By" +
                        "BranchNameAndSLID.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 35
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 37
 testRunner.Given("var %orderId% is equal to response.sqlresult.[0].OrderId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 38
 testRunner.And("var %episodeId% is equal to response.sqlresult.[0].EpisodeId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 39
 testRunner.And("var %mrn% is equal to response.sqlresult.[0].MRN type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 40
 testRunner.Then("print var %episodeId% debug", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 44
 testRunner.Given("hl7 file location \\\\qbintsys111\\g$\\Archive\\Orders2\\StockOBORU\\HCHB_QAODD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 45
 testRunner.When("hl7 file location delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 46
 testRunner.Then("assert hl7 file location is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 50
 testRunner.Given("sql query select vit_id from VENDOR_INTERFACE_TRANSACTIONS where vit_vid = 334 an" +
                        "d vit_description = \'Physician Verbal Order Approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 51
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 53
 testRunner.Given("var %vt_vitid% is equal to response.sqlresult.[0].vit_id type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 57
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_InsertOrder" +
                        ".txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 58
 testRunner.When("method SQLServer-INSERT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 62
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 63
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 64
 testRunner.Then("assert json response sqlresult[0].processId is equal to N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 69
 testRunner.Given("wait 35000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 73
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 74
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 75
 testRunner.Then("assert json response sqlresult[0].processId is equal to Y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 76
 testRunner.And("assert json response sqlresult[0].vendor_userName is equal to AUTOMATION", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 77
 testRunner.And("assert json response sqlresult[0].sessionId contains ORDERS2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 78
 testRunner.And("assert json response sqlresult[0].statusMessage contains Message was successfully" +
                        " processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.Given("hl7 file location %TestRun_Resources.StockOutboundORU_DropLoc%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 84
 testRunner.When("method GET-HL7-File", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 85
 testRunner.Then("assert hl7 response MSH.2 is equal to ^~\\&", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.And("assert hl7 response MSH.5 is equal to eCW", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And("assert hl7 response MSH.6 is equal to %vsb_vdefconfig4%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 88
 testRunner.And("assert hl7 response MSH.9.1 is equal to ORU", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 89
 testRunner.And("assert hl7 response MSH.9.2 is equal to R01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 90
 testRunner.And("assert hl7 response MSH.10 contains %mrn%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 91
 testRunner.And("assert hl7 response MSH.11 is equal to P", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 92
 testRunner.And("assert hl7 response MSH.12 is equal to 2.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="StockOutboundORU_SmokeTest_MSH_Segment_HOSP_With_vsb_vdefconfig4_value")]
        [Xunit.TraitAttribute("FeatureTitle", "StockOutboundORU_MSH_Segment_Tests")]
        [Xunit.TraitAttribute("Description", "StockOutboundORU_SmokeTest_MSH_Segment_HOSP_With_vsb_vdefconfig4_value")]
        [Xunit.TraitAttribute("Category", "StockOutboundORU")]
        [Xunit.TraitAttribute("Category", "ApplicationID_416")]
        [Xunit.TraitAttribute("Category", "VendorId_334")]
        public void StockOutboundORU_SmokeTest_MSH_Segment_HOSP_With_Vsb_Vdefconfig4_Value()
        {
            string[] tagsOfScenario = new string[] {
                    "StockOutboundORU",
                    "ApplicationID_416",
                    "VendorId_334"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("StockOutboundORU_SmokeTest_MSH_Segment_HOSP_With_vsb_vdefconfig4_value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 96
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
#line 100
 testRunner.Given("var %serviceLineId% as 2 type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 104
 testRunner.Given("sql query select top 1 vsb_id, vsb_branchcode from VENDORS_SERVICELINES_BRANCHES " +
                        "where vsb_vid = %vendorId% and vsb_slid = %serviceLineId% and vsb_active = \'Y\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 105
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 107
 testRunner.Given("var %vsb_id% is equal to response.sqlresult.[0].vsb_id type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 108
 testRunner.And("var %branchName% is equal to response.sqlresult.[0].vsb_branchcode type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 109
 testRunner.And("var %vsb_vdefconfig4% = %branchName% + 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 113
 testRunner.Given("sql query UPDATE dbo.VENDORS_SERVICELINES_BRANCHES SET vsb_vdefconfig4=\'%vsb_vdef" +
                        "config4%\' WHERE vsb_id=%vsb_id%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 114
 testRunner.When("method SQLServer-UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 118
 testRunner.Given("request read sql file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\GetClientInformation_By" +
                        "BranchNameAndSLID.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 119
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 121
 testRunner.Given("var %orderId% is equal to response.sqlresult.[0].OrderId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 122
 testRunner.And("var %episodeId% is equal to response.sqlresult.[0].EpisodeId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 123
 testRunner.And("var %mrn% is equal to response.sqlresult.[0].MRN type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 124
 testRunner.Then("print var %episodeId% debug", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 128
 testRunner.Given("hl7 file location \\\\qbintsys111\\g$\\Archive\\Orders2\\StockOBORU\\HCHB_QAODD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 129
 testRunner.When("hl7 file location delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 130
 testRunner.Then("assert hl7 file location is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 134
 testRunner.Given("sql query select vit_id from VENDOR_INTERFACE_TRANSACTIONS where vit_vid = 334 an" +
                        "d vit_description = \'Physician Verbal Order Approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 135
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 137
 testRunner.Given("var %vt_vitid% is equal to response.sqlresult.[0].vit_id type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 141
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_InsertOrder" +
                        ".txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 142
 testRunner.When("method SQLServer-INSERT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 146
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 147
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 148
 testRunner.Then("assert json response sqlresult[0].processId is equal to N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 152
 testRunner.Given("wait 35000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 156
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 157
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 158
 testRunner.Then("assert json response sqlresult[0].processId is equal to Y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 159
 testRunner.And("assert json response sqlresult[0].vendor_userName is equal to AUTOMATION", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 160
 testRunner.And("assert json response sqlresult[0].sessionId contains ORDERS2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 161
 testRunner.And("assert json response sqlresult[0].statusMessage contains Message was successfully" +
                        " processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 166
 testRunner.Given("hl7 file location %TestRun_Resources.StockOutboundORU_DropLoc%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 167
 testRunner.When("method GET-HL7-File", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 168
 testRunner.Then("assert hl7 response MSH.2 is equal to ^~\\&", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 169
 testRunner.And("assert hl7 response MSH.5 is equal to eCW", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 170
 testRunner.And("assert hl7 response MSH.6 is equal to %vsb_vdefconfig4%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 171
 testRunner.And("assert hl7 response MSH.9.1 is equal to ORU", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 172
 testRunner.And("assert hl7 response MSH.9.2 is equal to R01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 173
 testRunner.And("assert hl7 response MSH.10 contains %mrn%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 174
 testRunner.And("assert hl7 response MSH.11 is equal to P", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 175
 testRunner.And("assert hl7 response MSH.12 is equal to 2.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="StockOutboundORU_SmokeTest_MSH_Segment_PRIVATEDUTY_With_vsb_vdefconfig4_value")]
        [Xunit.TraitAttribute("FeatureTitle", "StockOutboundORU_MSH_Segment_Tests")]
        [Xunit.TraitAttribute("Description", "StockOutboundORU_SmokeTest_MSH_Segment_PRIVATEDUTY_With_vsb_vdefconfig4_value")]
        [Xunit.TraitAttribute("Category", "StockOutboundORU")]
        [Xunit.TraitAttribute("Category", "ApplicationID_416")]
        [Xunit.TraitAttribute("Category", "VendorId_334")]
        public void StockOutboundORU_SmokeTest_MSH_Segment_PRIVATEDUTY_With_Vsb_Vdefconfig4_Value()
        {
            string[] tagsOfScenario = new string[] {
                    "StockOutboundORU",
                    "ApplicationID_416",
                    "VendorId_334"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("StockOutboundORU_SmokeTest_MSH_Segment_PRIVATEDUTY_With_vsb_vdefconfig4_value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 179
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
#line 183
 testRunner.Given("var %serviceLineId% as 3 type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 187
 testRunner.Given("sql query select top 2 vsb_id, vsb_branchcode from VENDORS_SERVICELINES_BRANCHES " +
                        "where vsb_vid = %vendorId% and vsb_slid = %serviceLineId% and vsb_active = \'Y\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 188
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 190
 testRunner.Given("var %vsb_id% is equal to response.sqlresult.[1].vsb_id type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 191
 testRunner.And("var %branchName% is equal to response.sqlresult.[1].vsb_branchcode type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 192
 testRunner.And("var %vsb_vdefconfig4% = %branchName% + 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 196
 testRunner.Given("sql query UPDATE dbo.VENDORS_SERVICELINES_BRANCHES SET vsb_vdefconfig4=\'%vsb_vdef" +
                        "config4%\' WHERE vsb_id=%vsb_id%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 197
 testRunner.When("method SQLServer-UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 201
 testRunner.Given("request read sql file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\GetClientInformation_By" +
                        "BranchNameAndSLID.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 202
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 204
 testRunner.Given("var %orderId% is equal to response.sqlresult.[0].OrderId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 205
 testRunner.And("var %episodeId% is equal to response.sqlresult.[0].EpisodeId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 206
 testRunner.And("var %mrn% is equal to response.sqlresult.[0].MRN type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 207
 testRunner.Then("print var %episodeId% debug", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 211
 testRunner.Given("hl7 file location \\\\qbintsys111\\g$\\Archive\\Orders2\\StockOBORU\\HCHB_QAODD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 212
 testRunner.When("hl7 file location delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 213
 testRunner.Then("assert hl7 file location is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 217
 testRunner.Given("sql query select vit_id from VENDOR_INTERFACE_TRANSACTIONS where vit_vid = 334 an" +
                        "d vit_description = \'Physician Verbal Order Approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 218
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 220
 testRunner.Given("var %vt_vitid% is equal to response.sqlresult.[0].vit_id type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 224
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_InsertOrder" +
                        ".txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 225
 testRunner.When("method SQLServer-INSERT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 229
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 230
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 231
 testRunner.Then("assert json response sqlresult[0].processId is equal to N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 235
 testRunner.Given("wait 30000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 239
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 240
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 241
 testRunner.Then("assert json response sqlresult[0].processId is equal to Y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 242
 testRunner.And("assert json response sqlresult[0].vendor_userName is equal to AUTOMATION", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 243
 testRunner.And("assert json response sqlresult[0].sessionId contains ORDERS2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 244
 testRunner.And("assert json response sqlresult[0].statusMessage contains Message was successfully" +
                        " processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 249
 testRunner.Given("hl7 file location %TestRun_Resources.StockOutboundORU_DropLoc%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 250
 testRunner.When("method GET-HL7-File", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 251
 testRunner.Then("assert hl7 response MSH.2 is equal to ^~\\&", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 252
 testRunner.And("assert hl7 response MSH.5 is equal to eCW", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 253
 testRunner.And("assert hl7 response MSH.6 is equal to %vsb_vdefconfig4%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 254
 testRunner.And("assert hl7 response MSH.9.1 is equal to ORU", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 255
 testRunner.And("assert hl7 response MSH.9.2 is equal to R01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 256
 testRunner.And("assert hl7 response MSH.10 contains %mrn%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 257
 testRunner.And("assert hl7 response MSH.11 is equal to P", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 258
 testRunner.And("assert hl7 response MSH.12 is equal to 2.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="StockOutboundORU_SmokeTest_MSH_Segment_PRIVATEDUTY_Without_vsb_vdefconfig4_value")]
        [Xunit.TraitAttribute("FeatureTitle", "StockOutboundORU_MSH_Segment_Tests")]
        [Xunit.TraitAttribute("Description", "StockOutboundORU_SmokeTest_MSH_Segment_PRIVATEDUTY_Without_vsb_vdefconfig4_value")]
        [Xunit.TraitAttribute("Category", "StockOutboundORU")]
        [Xunit.TraitAttribute("Category", "ApplicationID_416")]
        [Xunit.TraitAttribute("Category", "VendorId_334")]
        public void StockOutboundORU_SmokeTest_MSH_Segment_PRIVATEDUTY_Without_Vsb_Vdefconfig4_Value()
        {
            string[] tagsOfScenario = new string[] {
                    "StockOutboundORU",
                    "ApplicationID_416",
                    "VendorId_334"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("StockOutboundORU_SmokeTest_MSH_Segment_PRIVATEDUTY_Without_vsb_vdefconfig4_value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 261
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
#line 265
 testRunner.Given("var %serviceLineId% as 3 type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 269
 testRunner.Given("sql query select top 2 vsb_id, vsb_branchcode from VENDORS_SERVICELINES_BRANCHES " +
                        "where vsb_vid = %vendorId% and vsb_slid = %serviceLineId% and vsb_active = \'Y\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 270
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 272
 testRunner.Given("var %vsb_id% is equal to response.sqlresult.[1].vsb_id type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 273
 testRunner.And("var %branchName% is equal to response.sqlresult.[1].vsb_branchcode type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 274
 testRunner.And("var %vsb_vdefconfig4% = %branchName% + 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 278
 testRunner.Given("request sqlserver UPDATE dbo.VENDORS_SERVICELINES_BRANCHES SET vsb_vdefconfig4=NU" +
                        "LL WHERE vsb_id=%vsb_id%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 279
 testRunner.When("method SQLServer-UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 283
 testRunner.Given("request read sql file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\GetClientInformation_By" +
                        "BranchNameAndSLID.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 284
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 286
 testRunner.Given("var %orderId% is equal to response.sqlresult.[0].OrderId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 287
 testRunner.And("var %episodeId% is equal to response.sqlresult.[0].EpisodeId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 288
 testRunner.And("var %mrn% is equal to response.sqlresult.[0].MRN type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 289
 testRunner.Then("print var %episodeId% debug", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 293
 testRunner.Given("hl7 file location \\\\qbintsys111\\g$\\Archive\\Orders2\\StockOBORU\\HCHB_QAODD", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 294
 testRunner.When("hl7 file location delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 295
 testRunner.Then("assert hl7 file location is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 299
 testRunner.Given("sql query select vit_id from VENDOR_INTERFACE_TRANSACTIONS where vit_vid = 334 an" +
                        "d vit_description = \'Physician Verbal Order Approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 300
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 302
 testRunner.Given("var %vt_vitid% is equal to response.sqlresult.[0].vit_id type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 306
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_InsertOrder" +
                        ".txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 307
 testRunner.When("method SQLServer-INSERT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 311
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 312
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 313
 testRunner.Then("assert json response sqlresult[0].processId is equal to N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 317
 testRunner.Given("wait 30000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 321
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 322
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 323
 testRunner.Then("assert json response sqlresult[0].processId is equal to Y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 324
 testRunner.And("assert json response sqlresult[0].vendor_userName is equal to AUTOMATION", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 325
 testRunner.And("assert json response sqlresult[0].sessionId contains ORDERS2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 326
 testRunner.And("assert json response sqlresult[0].statusMessage contains Message was successfully" +
                        " processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 331
 testRunner.Given("hl7 file location %TestRun_Resources.StockOutboundORU_DropLoc%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 332
 testRunner.When("method GET-HL7-File", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 333
 testRunner.Then("assert hl7 response MSH.2 is equal to ^~\\&", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 334
 testRunner.And("assert hl7 response MSH.5 is equal to eCW", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 335
 testRunner.And("assert hl7 response MSH.6 should be empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 336
 testRunner.And("assert hl7 response MSH.9.1 is equal to ORU", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 337
 testRunner.And("assert hl7 response MSH.9.2 is equal to R01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 338
 testRunner.And("assert hl7 response MSH.10 contains %mrn%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 339
 testRunner.And("assert hl7 response MSH.11 is equal to P", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 340
 testRunner.And("assert hl7 response MSH.12 is equal to 2.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="StockOutboundORU_SmokeTest_MSH_Segment_HH_With_vsb_vdefconfig4_value")]
        [Xunit.TraitAttribute("FeatureTitle", "StockOutboundORU_MSH_Segment_Tests")]
        [Xunit.TraitAttribute("Description", "StockOutboundORU_SmokeTest_MSH_Segment_HH_With_vsb_vdefconfig4_value")]
        [Xunit.TraitAttribute("Category", "StockOutboundORU")]
        [Xunit.TraitAttribute("Category", "ApplicationID_416")]
        [Xunit.TraitAttribute("Category", "VendorId_334")]
        public void StockOutboundORU_SmokeTest_MSH_Segment_HH_With_Vsb_Vdefconfig4_Value()
        {
            string[] tagsOfScenario = new string[] {
                    "StockOutboundORU",
                    "ApplicationID_416",
                    "VendorId_334"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("StockOutboundORU_SmokeTest_MSH_Segment_HH_With_vsb_vdefconfig4_value", null, tagsOfScenario, argumentsOfScenario, featureTags);
#line 344
this.ScenarioInitialize(scenarioInfo);
#line hidden
            if ((TagHelper.ContainsIgnoreTag(tagsOfScenario) || TagHelper.ContainsIgnoreTag(featureTags)))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 7
 this.FeatureBackground();
#line hidden
#line 349
 testRunner.Given("var %serviceLineId% as 1 type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 353
 testRunner.Given("request read sql file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\GetClientInformation_By" +
                        "BranchNameAndSLID.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 354
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 356
 testRunner.Given("var %orderId% is equal to response.sqlresult.[0].OrderId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 357
 testRunner.And("var %episodeId% is equal to response.sqlresult.[0].EpisodeId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 358
 testRunner.And("var %mrn% is equal to response.sqlresult.[0].MRN type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 359
 testRunner.And("var %branchCode% is equal to response.sqlresult.[0].BranchCode type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 360
 testRunner.Then("print var %episodeId% debug", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 364
 testRunner.Given("sql query select top 1 vsb_id from VENDORS_SERVICELINES_BRANCHES where vsb_branch" +
                        "code = \'%branchCode%\' and vsb_vid = %vendorId%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 365
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 367
 testRunner.Given("var %vsb_id% is equal to response.sqlresult.[0].vsb_id type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 368
 testRunner.And("var %vsb_vdefconfig4% = %branchCode% + 1", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 372
 testRunner.Given("sql query UPDATE dbo.VENDORS_SERVICELINES_BRANCHES SET vsb_vdefconfig4=\'%vsb_vdef" +
                        "config4%\' WHERE vsb_id=%vsb_id%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 373
 testRunner.When("method SQLServer-UPDATE", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 377
 testRunner.Given("request read sql file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\GetClientInformation_By" +
                        "BranchNameAndSLID.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 378
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 380
 testRunner.Given("var %orderId% is equal to response.sqlresult.[0].OrderId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 381
 testRunner.And("var %episodeId% is equal to response.sqlresult.[0].EpisodeId type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 382
 testRunner.And("var %mrn% is equal to response.sqlresult.[0].MRN type string", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 383
 testRunner.Then("print var %episodeId% debug", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 387
 testRunner.Given("hl7 file location %TestRun_Resources.StockOutboundORU_DropLoc%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 388
 testRunner.When("hl7 file location delete", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 389
 testRunner.Then("assert hl7 file location is empty", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 393
 testRunner.Given("sql query select vit_id from VENDOR_INTERFACE_TRANSACTIONS where vit_vid = 334 an" +
                        "d vit_description = \'Physician Verbal Order Approval\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 394
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 396
 testRunner.Given("var %vt_vitid% is equal to response.sqlresult.[0].vit_id type int", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 400
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_InsertOrder" +
                        ".txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 401
 testRunner.When("method SQLServer-INSERT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 405
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 406
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 407
 testRunner.Then("assert json response sqlresult[0].processId is equal to N", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 410
 testRunner.Given("wait 35000", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 414
 testRunner.Given("sql read file .\\\\Data\\\\SQLData\\\\StockOutboundORU\\\\VENDOR_TRANSACTIONS_GetDataByEp" +
                        "isodeAndEntityIdAndUser.txt", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 415
 testRunner.When("method SQLServer-SELECT", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 416
 testRunner.Then("assert json response sqlresult[0].processId is equal to Y", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 417
 testRunner.And("assert json response sqlresult[0].vendor_userName is equal to AUTOMATION", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 418
 testRunner.And("assert json response sqlresult[0].sessionId contains ORDERS2", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 419
 testRunner.And("assert json response sqlresult[0].statusMessage contains Message was successfully" +
                        " processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 425
 testRunner.When("method GET-HL7-File", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 426
 testRunner.Then("assert hl7 response MSH.2 is equal to ^~\\&", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 427
 testRunner.And("assert hl7 response MSH.5 is equal to eCW", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 428
 testRunner.And("assert hl7 response MSH.6 is equal to %vsb_vdefconfig4%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 429
 testRunner.And("assert hl7 response MSH.9.1 is equal to ORU", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 430
 testRunner.And("assert hl7 response MSH.9.2 is equal to R01", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 431
 testRunner.And("assert hl7 response MSH.10 contains %mrn%", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 432
 testRunner.And("assert hl7 response MSH.11 is equal to P", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 433
 testRunner.And("assert hl7 response MSH.12 is equal to 2.5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                StockOutboundORU_MSH_Segment_TestsFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                StockOutboundORU_MSH_Segment_TestsFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
